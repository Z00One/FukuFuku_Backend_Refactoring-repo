generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_LOCAL")
}

model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique @db.VarChar(40)
  picture      String      @db.VarChar(100)
  firstName    String      @db.VarChar(10)
  lastName     String      @db.VarChar(15)
  isAdmin      Int?
  nickName     String?     @unique @db.VarChar(10)
  introduction String?     @db.VarChar(50)
  board        Board[]
  comment      Comment[]
  reply        Reply[]
  like         Like[]
}

model Like {
  id   Int  @unique @default(autoincrement())
  b_id Int
  u_id Int
  board Board @relation(fields: [b_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user User @relation(fields: [u_id], references: [id], onDelete: Cascade)

  @@id([id, b_id, u_id])
}

model Board {
  id        Int       @id @unique @default(autoincrement())
  title     String    @db.VarChar(20)
  content   String    @db.Text
  like      Like[]   
  views     Int?      @default(0)
  createdAt DateTime  @default(now()) @map("created_at")
  comment   Comment[] 
  u_id      Int
  user      User      @relation(fields: [u_id], references: [id], onDelete: Cascade)
  tag       Board_Tag[]     
}

model Board_Tag {
  id        Int       @id @default(autoincrement())
  board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  boardId   Int
  tagId     Int
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(20)
  board_tag Board_Tag[]
  bt_id     Int
}

model Comment {
  id        Int     @id @unique @default(autoincrement())
  commenter String  @db.VarChar(10)
  content   String  @db.VarChar(100)
  img       String  
  reply     Reply[] @relation()
  Board     Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   Int?
  u_id      Int
  user      User    @relation(fields: [u_id], references: [id], onDelete: Cascade)
}

model Reply {
  id        Int     @unique @default(autoincrement())
  commenter String  @db.VarChar(10)
  img       String
  content   String  @db.VarChar(100)
  c_id      Int
  comment   Comment @relation(fields: [c_id], references: [id], onDelete: Cascade)
  u_id      Int
  user      User    @relation(fields: [u_id], references: [id], onDelete: Cascade)

  @@id([id, c_id])
}


model Postimage {
  id   Int     @id @default(autoincrement())
  p_id Int
  url  String? @db.VarChar(50)
}