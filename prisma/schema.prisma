generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_LOCAL")
}

model User {
  id           Int         @id @default(autoincrement())
  email        String      @db.VarChar(40) @unique
  picture      String      @db.VarChar(100)
  firstName    String      @db.VarChar(10)
  lastName     String      @db.VarChar(15)
  isAdmin      Int?
  refreshToken String?     @db.VarChar(250) @unique
  nickName     String?     @db.VarChar(10)
  post         Post[]
  userimage    Userimage[]
}

model Userimage {
  id   Int     @id @default(autoincrement())
  u_id Int     @unique
  url  String? @db.VarChar(50)
  user User    @relation(fields: [u_id], references: [id], onDelete: Cascade)
}

model Post {
  id        Int         @unique @default(autoincrement())
  u_id      Int
  title     String      @db.VarChar(20)
  content   String      @db.Text
  like      Int?        @default(0)
  views     Int?        @default(0)
  writeDate DateTime    @db.Date
  comment   Comment[]
  user      User        @relation(fields: [u_id], references: [id], onDelete: NoAction)
  postimage Postimage[]

  @@id([id, u_id])
}

model Postimage {
  id   Int     @id @default(autoincrement())
  p_id Int
  url  String? @db.VarChar(50)
  post Post    @relation(fields: [p_id], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int     @unique @default(autoincrement())
  p_id      Int
  commenter String  @db.VarChar(10)
  comment   String  @db.VarChar(100)
  like      Int?    @default(0)
  post      Post    @relation(fields: [p_id], references: [id], onDelete: Cascade)
  reply     Reply[]

  @@id([id, p_id])
}

model Reply {
  id      Int     @unique @default(autoincrement())
  c_id    Int
  replyer String  @db.VarChar(10)
  reply   String  @db.VarChar(100)
  like    Int?    @default(0)
  comment Comment @relation(fields: [c_id], references: [id], onDelete: NoAction)

  @@id([id, c_id])
}
